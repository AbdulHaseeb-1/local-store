generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  categoryId   BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  categoryName String     @db.VarChar(255)
  description  String?    @db.Text
  imageUrl     String     @db.VarChar(255)
  products     products[]
}

model customers {
  customer_id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id             BigInt   @unique(map: "user_id")
  first_name          String   @db.VarChar(255)
  last_name           String   @db.VarChar(255)
  email               String   @unique(map: "email") @db.VarChar(100)
  phone_number        String?  @db.VarChar(13)
  shipping_address_id BigInt?
  billing_address_id  BigInt?
  is_active           Boolean? @default(true)
}

model images {
  image_id   BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  product_id BigInt?   @db.UnsignedBigInt
  image_url  String    @db.VarChar(255)
  products   products? @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: SetNull, map: "images_ibfk_1")

  @@index([product_id], map: "product_id")
}

model order_items {
  order_item_id BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  order_id      BigInt   @db.UnsignedBigInt
  product_id    BigInt   @db.UnsignedBigInt
  quantity      Int      @default(1)
  unit_price    Decimal  @db.Decimal(10, 2)
  total_price   Decimal  @db.Decimal(10, 2)
  products      products @relation(fields: [product_id], references: [product_id], onUpdate: Restrict, map: "order_items_ibfk_1")
  orders        orders   @relation(fields: [order_id], references: [order_id], onDelete: Cascade, map: "order_items_ibfk_2")

  @@index([product_id], map: "product_id")
  @@index([order_id], map: "order_items_ibfk_2")
}

model orders {
  order_id         BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  customer         String               @db.VarChar(100)
  phone            String               @db.VarChar(11)
  total_amount     Decimal              @db.Decimal(10, 2)
  order_address_id BigInt?              @db.UnsignedBigInt
  order_status     orders_order_status? @default(Pending)
  order_date       DateTime             @default(now()) @db.Timestamp(0)
  order_items      order_items[]
  order_address    order_address?       @relation(fields: [order_address_id], references: [order_address_id], onUpdate: SetNull, map: "orders_ibfk_1")

  @@index([order_address_id], map: "order_address_id")
}

model payment_methods {
  payment_method_id    BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  payment_method_name  String   @unique(map: "payment_method_name") @db.VarChar(255)
  description          String?  @db.Text
  payment_processor_id BigInt?
  is_active            Boolean? @default(true)
}

model product_size {
  size_id  Int        @id @default(autoincrement())
  size     String     @db.VarChar(10)
  products products[]
}

model products {
  product_id          BigInt              @unique(map: "product_id") @default(autoincrement()) @db.UnsignedBigInt
  product_title       String              @db.Text
  product_description String              @db.Text
  category_id         BigInt?             @db.UnsignedBigInt
  brand_name          String              @db.VarChar(255)
  price               Decimal             @db.Decimal(10, 2)
  stock_quantity      Int                 @default(0)
  condition_id        Int?                @db.UnsignedSmallInt
  is_active           Boolean             @default(true)
  size_id             Int?
  admin_id            BigInt
  is_featured         Boolean             @default(false)
  quantity            Int                 @default(1)
  images              images[]
  order_items         order_items[]
  product_size        product_size?       @relation(fields: [size_id], references: [size_id], onUpdate: SetNull, map: "products_ibfk_1")
  categories          categories?         @relation(fields: [category_id], references: [categoryId], onUpdate: SetNull, map: "products_ibfk_2")
  product_conditions  product_conditions? @relation(fields: [condition_id], references: [condition_id], onUpdate: SetNull, map: "products_ibfk_3")

  @@index([size_id], map: "products_ibfk_1")
  @@index([category_id], map: "products_ibfk_2")
  @@index([condition_id], map: "condition_id")
}

model reviews {
  review_id   BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  customer_id BigInt
  product_id  BigInt?
  seller_id   BigInt?
  review_date DateTime @default(now()) @db.Timestamp(0)
  rating      Decimal  @db.Decimal(2, 1)
  review_text String?  @db.Text
  is_approved Boolean? @default(false)
}

model users {
  user_id           BigInt      @id @default(autoincrement())
  username          String      @db.VarChar(60)
  email             String      @unique(map: "email") @db.VarChar(255)
  password          String      @db.VarChar(255)
  registration_date DateTime    @default(now()) @db.DateTime(0)
  last_login_date   DateTime    @default(now()) @db.DateTime(0)
  is_active         Boolean     @default(true)
  role              users_role? @default(admin)
}

model order_address {
  order_address_id BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  city             String   @db.VarChar(100)
  state            String   @db.VarChar(100)
  address          String   @db.Text
  orders           orders[]
}

model product_conditions {
  condition_id Int        @id @default(autoincrement()) @db.UnsignedSmallInt
  condition    String     @db.VarChar(100)
  products     products[]
}

enum users_role {
  admin
}

enum orders_order_status {
  Pending
  Confirmed
  Shipped
  Delivered
  Canceled
}
